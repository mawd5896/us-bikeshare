import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    
    city = ''
    while city not in CITY_DATA.keys():
        print("\nWelcome to this program. Please choose your city: 1. Chicago 2. New York City 3. Washington")
            
        city = input().lower()

            
        if city not in CITY_DATA.keys():
            print("\nPlease check your input, it doesn\'t look to be an accepted input formats.")
            

  
    
    # TO DO: get user input for month (all, january, february, ... , june)
    MONTH_DATA = {'january': 1, 'february': 2, 'march': 3, 'april': 4, 'may': 5, 'june': 6, 'all': 7}
    month = ''
    
    while month not in MONTH_DATA.keys():
            print("\nPlease enter the month, between January to June, for which you're seeking the data, or choose all:")
            
            month = input().lower()
            
            if month not in MONTH_DATA.keys():
                print("\nPlease check your input, it doesn\'t look to be an accepted input formats.")
            
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    DAY_DATA = ['all', 'saturday', 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday' ]
    day = ''
    
    while day not in DAY_DATA:
            print("\nPlease enter the day, between Saturday and Friday, or choose all:")
            
            day = input().lower()
            
            if day not in DAY_DATA:
                print("\nPlease check your input, it doesn\'t look to be an accepted input formats.")
                
            print("\nYou have chosen to view data for city: {}, month/s: {}, and day/s: {}".format(city, month, day))
    
    
    print('-'*40)
    return city, month, day

        

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    df['month'] = df['Start Time'].dt.month

    df['day'] = df['Start Time'].dt.weekday_name
    
    
    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['month'] == month]
    
    if day != 'all':
        df = df[df['day'] == day.title()]
        
    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""
    
    
    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    common_month = df['month'].mode()[0]

    print('Most Common Month (1 = January,..,6 = June) : ', common_month)

    # TO DO: display the most common day of week
    common_day = df['day'].mode()[0]

    print('Most Common Day of Week:', common_day)


    # TO DO: display the most common start hour
    
    df['hour'] = df['Start Time'].dt.hour
    
    
    common_hour = df['hour'].mode()[0]
    
    
    
    print('Most Common Start Hour:', common_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    
    
    common_start_station = df['Start Station'].mode()[0]

    print('Most Commonly Used Start Station:', common_start_station)
    # TO DO: display most commonly used end station
    
    common_end_station = df['End Station'].mode()[0]

    print('Most Commonly Used End Station:', common_end_station)

    # TO DO: display most frequent combination of start station and end station trip
    df['Start To End'] = df['Start Station'].str.cat(df['End Station'], sep=' to ')
    combo = df['Start To End'].mode()[0]

    print(f"\nThe most frequent combination of trips are from {combo}.")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_duration = df['Trip Duration'].sum()
    total_duration = round(total_duration / 60)
    
    print("The total trip duration is {} minutes.".format(total_duration))
    
    # TO DO: display mean travel time
    average_duration = round(df['Trip Duration'].mean())
    
    print("The average trip duration is {} s.".format(average_duration))

    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_type = df['User Type'].value_counts()
    
    print("The types of users by number are: {}".format(user_type))

    # TO DO: Display counts of gender
    try:
        gender = df['Gender'].value_counts()
        print("The types of users by gender are: {}".format(gender))
    except:
        print("There is no 'Gender' info for this city.")

    # TO DO: Display earliest, most recent, and most common year of birth
    try:
        earliest = int(df['Birth Year'].min())
        latest = int(df['Birth Year'].max())
        common_year = int(df['Birth Year'].mode()[0])
        
        print("The earliest year of birth: {}, the most recent year of birth: {}, the most common year of birth: {}".format(earliest, latest, common_year))
    except:
        print("There are no birth year details for this city.")
        
    view_data = input('\nWould you like to view 5 rows of individual trip data? Enter yes or no\n')
    start_loc = 0
    
    while (view_data == 'yes'):
        print(df.iloc[start_loc:start_loc+5])
        start_loc += 5
        view_data = input("Do you wish to continue?: ").lower()
            
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        
        trip_duration_stats(df)
        
        user_stats(df)
        
            
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()

